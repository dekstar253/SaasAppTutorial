notes

Ruby Stuff:
    Ruby is the language, Rails is the framework.  A bunch of files that do stuff
    gems - prewritten bits of code from other devs to use in Rails.  Like plugins
    gemset - a list of gems assigned to a particular app.
    bundle install command or bundle update
    gemfile - file with a list of gems and versions
    gemfile.lock - all nested gems and dependencies

Adding Homepage
    Quick and dirty - Go to /public/ and add index.html.  BUT no rails functions just temporary page.  
    Rails Way: 
        3 files work together - controller file, views file, routes file 
        add to app/controllers/pages_controller.rb - ruby file.  Created PagesController class from ApplicationController class. Function called home.  (Method) 
        add to views.  All files in the views folders make up the look of site. Filename home must match method name.  
        need to add page to config/routes.rb Says the root needs to be home method in pages controller. 
        controller#action
        
Adding custome google fonts
    Went to google fonts.  added the link to /views/layouts/application.html.erb and defined h1, h2, h3 in app/assets/stylesheets/application.css

Adding About page
    Used the 3 files.  Created app/layouts/pages/about.html.erb, added controller action and added route. 
    
Using Bootstrap Framework
    Makes development easier
    Can just get the link from bootstrapcdn.com and paste into the /apps/views/layouts/application.html.erb file, but there's a gem for that!
    gem 'bootstrap-sass', '3.3.7'
    rename /app/stylesheets/application.css to .scss
    @import 'bootstrap-sockets'; 
    bootstrap sass gem documentation

Nav Menu w/Bootstrap
    Pasted modified code from bootstrap; get code then adjust. (not rails way tho)
    app/views/layouts/application.html.erb - is a file that injects code to all pages. 
    shaved the code down from bootstrap 
    with bootstrap - you look for the things you want; get the code and adjust

Background color/gradient
    edited application.css.scss (master css) file and added class rules
    box model - element->padding->border->margin 
    
Improving home layout
    Added a few classes to "label" elements for CSS. Bootstrap classes apply properties from bootstrap
    Used inspector to tweak margins in box model. 
    

Navbar color
    specificity - assigns more point to things with higher level of specificity, 
    operators ">" etc,  read up on w3schools 
        
Refactoring.  DRY. Don't Repeat Yourself.
    comma "," allows to group 
    sass way: nest selectors with &.  Read documentation for Sass. 
    cmd + / makes comment out of line 
    
Logo for site. Using Font Awesome gem - Went to github for font awesome documentation and installation instructions
    <a href="/" class="navbar-brand"><i class="fa fa-group"></i> DevMatch</a> Added the logo by nesting with the <i> tag. 
    Check licenses
    
Links the Rails way:
    Use link_to.  <%= %> - injects ruby code with the %% because it's modular.  
    auto generate path name 
    command "rails routes" displays routes
    config/routes
    then use the prefix before _path. ie. about_path.  This way is more modular and don't have to change every time a link changes.  Just change the action.  Place holder
    routes file is master list of all pages users are allowed to go to 
    
About Page
    Used container-fluid, but that's for mobile.   
    
Bootstrap javascript
    Used the inspector to dig into the html where the mobile hamburger menu.  Added the navbar classes to css with sass and changed the color, width, border. Need to add a line to the application.js file 
    so that bootstrap can use javascript. 
    
The Rails Asset Pipeline
    Enables speed of site because it consolidates the requests for javascript and css to one file instead of many.  The application.js and application.scss files are manifests for the one file
    https://guides.rubyonrails.org/asset_pipeline.html
    
Forms Are Everywhere
    Everything is a form - Forms are one of the major and common ways we interact with the internet. 
    
Buiding a contact form
    Object oriented programing. OOP.  Think of all the things as objects. I.e. ea user, form submit, 
    created new branch. git branch. git checkout -b (new branch) 
    create new controller contacts_controller.rb in /app/controllers becuase it's its own object or method/action
    create new folder in the view folder
    create new file in the app/views/contact folder called new that matches the def. 
    add to routes file
    
Contact Form Fields
    using html you can create form with the input tag but not rails way.  Rails uses form helper code. 
    using <% (whatever that is) generates html with stuff built into it w/best practices
    read more rails form helper
    
Bootstrap the form 
    go to the bootstrap site and lookup the examples. 
    so we wrap the form elements into a class called form_group using div 
    used the bootstrap html class and defined it in the ruby code. 
    use the bootstrap grid system by using the div in the container
    
Navlink for Contact Form Page
    use the layout file  - nav menu shows on all pages 
    use rails routes command in terminal - spits out all available pages
    from routes.rb file - /contacts/new with prefix new_contact 
    so we put in the layouts/appliation file <li><%= link_to "Link Name", (prefix)_path %></li>
    why resources :contacts expands 8 different routes. RESTful routes. Most common stuff we do with resources. Short cut for REST 
    
Contacts Table
    data from a form goes to database.  Called persistance.  Columns and rows like a spreadsheet.  Ea row called a record, columns have data.  
    a company's value is their database.  i.e. Facebook would be devalued if it's database was deleted. 
    generate a migration file with rails generate migration CreateContacts.  migration file is like a blueprint for a database
    in the migration file there's boilerplate code.  we add the columns we want with t.string :columnname.  |t| is defined so t. 
    to create the tablel or "run migration" rails db:migrate